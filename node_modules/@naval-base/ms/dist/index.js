"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const SEPERATORS = [' ', '.', ',', '-'];
const REGEX = /^(-?(?:\d+)?\.?\d+) *([a-z]+)?$/;
function tokenize(str) {
    const units = [];
    let buf = '';
    let letter = false;
    for (const char of str) {
        if (SEPERATORS.includes(char)) {
            buf += char;
        }
        else if (isNaN(parseInt(char, 10))) {
            buf += char;
            letter = true;
        }
        else {
            if (letter) {
                units.push(buf.trim());
                buf = '';
            }
            letter = false;
            buf += char;
        }
    }
    if (buf.length) {
        units.push(buf.trim());
    }
    return units;
}
function convert(num, type) {
    switch (type) {
        case 'years':
        case 'year':
        case 'yrs':
        case 'yr':
        case 'y':
            return num * 31557600000 /* YEAR */;
        case 'weeks':
        case 'week':
        case 'w':
            return num * 604800000 /* WEEK */;
        case 'days':
        case 'day':
        case 'd':
            return num * 86400000 /* DAY */;
        case 'hours':
        case 'hour':
        case 'hrs':
        case 'hr':
        case 'h':
            return num * 3600000 /* HOUR */;
        case 'minutes':
        case 'minute':
        case 'mins':
        case 'min':
        case 'm':
            return num * 60000 /* MINUTE */;
        case 'seconds':
        case 'second':
        case 'secs':
        case 'sec':
        case 's':
            return num * 1000 /* SECOND */;
    }
    return num;
}
function pluralize(ms, msAbs, n, long, short, l = false) {
    const plural = msAbs >= n * 1.5;
    return `${Math.round(ms / n)}${l ? ` ${long}${plural ? 's' : ''}` : short}`;
}
function ms(val, long = false) {
    let abs;
    let ms = 0;
    if (typeof val === 'string' && val.length) {
        if (val.length < 101) {
            const units = tokenize(val.toLowerCase());
            for (const unit of units) {
                const fmt = REGEX.exec(unit);
                if (fmt) {
                    abs = parseFloat(fmt[1]);
                    ms += convert(abs, fmt[2]);
                }
            }
            return ms;
        }
    }
    if (typeof val === 'number' && isFinite(val)) {
        abs = Math.abs(val);
        if (abs >= 86400000 /* DAY */)
            return pluralize(val, abs, 86400000 /* DAY */, 'day', 'd', long);
        if (abs >= 3600000 /* HOUR */)
            return pluralize(val, abs, 3600000 /* HOUR */, 'hour', 'h', long);
        if (abs >= 60000 /* MINUTE */)
            return pluralize(val, abs, 60000 /* MINUTE */, 'minute', 'm', long);
        if (abs >= 1000 /* SECOND */)
            return pluralize(val, abs, 1000 /* SECOND */, 'second', 's', long);
        return `${val}${long ? ' ' : ''}ms`;
    }
    throw new Error(`Value is an empty string or an invalid number. Value=${JSON.stringify(val)}`);
}
exports.ms = ms;
exports.default = ms;
